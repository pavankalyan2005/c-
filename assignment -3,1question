Given an array of distinct elements of size N, the task is to rearrange the elements of the array in a zig-zag fashion so that the converted array should be in the below form:
arr[0] < arr[1] > arr[2] < arr[3] > arr[4] < .. arr[n-2] < arr[n-1] > arr[n].
Input: N = 7, arr[] = {4, 3, 7, 8, 6, 2, 1}
Output: arr[] = {3, 7, 4, 8, 2, 6, 1}
Explanation: The given array is in zig-zag pattern as we can see 3 <7>4<8>2 < 6 >1
Input: N = 4, arr[] = {1, 4, 3, 2} Output: arr[] = {1, 4, 2, 3}
Explanation: The given array is in zig-zag pattern as we can see 1 < 4 > 2 < 3

A)
#include <iostream>
#include <algorithm>
using namespace std;
void zigZagArrange(vector<int>& arr) {
    int n = arr.size();
    bool flag = true; // True indicates "<" relation
    for (int i = 0; i < n - 1; ++i) {
        if (flag) {
            if (arr[i] > arr[i + 1])
                swap(arr[i], arr[i + 1]);
        } else {
            if (arr[i] < arr[i + 1])
                swap(arr[i], arr[i + 1]);
        }
        flag = !flag; // Switching relation for next pair
    }
}
int main() {
    vector<int> arr = {4, 3, 7, 8, 6, 2, 1};
    int n = arr.size();
    zigZagArrange(arr);
    cout << "Zig-zag arranged array: ";
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}
